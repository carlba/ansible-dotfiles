---

- hosts: all
  roles:
    - { role: syncthing, tags: syncthing }
    - { role: jetbrains-toolbox, tags: jetbrains-toolbox }
  tasks:

    - name: Look for possible Google Drive paths
      stat:
        path: "{{ item }}"
      loop:
        - '{{ ansible_env.HOME }}/Google Drive'
        - '{{ ansible_env.HOME }}/gdrive'
      register: result
      tags: test

    - set_fact:
        google_drive_path: '{{ (result.results | selectattr("stat.exists", "equalto", true) | list | first).item }}'
      tags: test

    - name: Ensure iTerm2 is installed and of latest version
      homebrew_cask:
        name: iterm2
        state: upgraded

    - name: Speed up dock autohide
      osx_defaults:
        domain: com.apple.dock
        key: autohide-time-modifier
        type: int
        value: 0
        state: present

    - name: Speed up dock autohide
      osx_defaults:
        domain: com.apple.dock
        key: autohide-delay
        type: float
        value: 0.0
        state: present

    - name: Promt on quit
      osx_defaults:
        domain: com.googlecode.iterm2
        key: PromptOnQuit
        type: string
        value: 0
        state: present

    - name: Ensure MacOS doesn't read .DS_Store from network storage
      osx_defaults:
        domain: com.apple.desktopservices
        key: DSDontWriteNetworkStores
        type: bool
        value: true
        state: present

    - name: Ensure MacOS uses Scale effect when minimizing windows
      osx_defaults:
        domain: com.apple.dock
        key: mineffect
        type: string
        value: scale
        state: present

    # http://osxdaily.com/2010/03/02/minimize-windows-into-the-applications-dock-icon/
    - name: Ensure MacOS minimizes applications to dock icon
      osx_defaults:
        domain: com.apple.dock
        key: minimize-to-application
        type: bool
        value: true
        state: present

    - name: Create KeyBindings Directory
      file:
        path: "{{ ansible_env.HOME }}/Library/KeyBindings"
        state: directory

    - name: Remap home and end to linux behaviour
      blockinfile:
        marker: "/* {mark} ANSIBLE MANAGED BLOCK (Remap home and end to linux behaviour) */"
        dest: "{{ ansible_env.HOME }}/Library/KeyBindings/DefaultKeyBinding.dict"
        create: true
        block: |
          {
              "\UF729" = "moveToBeginningOfLine:"; /* Home */
              "\UF72B" = "moveToEndOfLine:"; /* End */
              "$\UF729" = "moveToBeginningOfLineAndModifySelection:"; /* Shift + Home */
              "$\UF72B" = "moveToEndOfLineAndModifySelection:"; /* Shift + End */
              "^\UF729" = "moveToBeginningOfDocument:"; /* Ctrl + Home */
              "^\UF72B" = "moveToEndOfDocument:"; /* Ctrl + End */
              "$^\UF729" = "moveToBeginningOfDocumentAndModifySelection:"; /* Shift + Ctrl + Home */
              "$^\UF72B" = "moveToEndOfDocumentAndModifySelection:"; /* Shift + Ctrl + End */
          }

    # Creates an entry like "PATH=/opt/bin" on top of crontab
    - name: Add path to crontab
      cron:
        name: PATH
        env: true
        value: /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
      tags: cron

    - name: Ensure cronjob that clears Google Chrome history daily exists
      cron:
        name: "Clear Google Chrome history"
        user: "{{ ansible_env.USER }}"
        job: "rm -rf /Users/{{ ansible_env.USER }}/Library/Application Support/Google/Chrome/Default/History*"
      tags: cron

    - name: Ensure Google Backup and Sync is installed and of latest version
      homebrew_cask:
        name: google-backup-and-sync
        state: upgraded

    - name: Ensure Karabiner Elements is installed and of latest version
      homebrew_cask:
        name: Karabiner-Elements
        state: upgraded
    
    - name: Ensure Karabiner config directory exists
      file:
        path: "{{ ansible_env.HOME }}/.config/karabiner/assets/complex_modifications"
        state: directory

    - name: Add Karabiner-Elements config to map caps lock to F19
      template:
        src: karabiner-caps-lock-keyboard-layout.json
        dest: "{{ ansible_env.HOME }}/.config/karabiner/assets/complex_modifications/karabiner-caps-lock-keyboard-layout.json"

    # TODO: Only add the login item if it doesn't exist
    - name: Ensure Karabiner-Elements is launched on startup
      shell: >
        osascript -e 'tell application "System Events" to make login item at end with properties
        {path:"/Applications/Karabiner-Elements.app", hidden:true}'
      when: false

    - name: Get status of Kernel Extension User Consent
      become: true
      shell: spctl --status
      register: spctl_output
      ignore_errors: true

    - name: "Ensure fix damaged app message on macOS Sierra doesn't appear"
      become: true
      shell: spctl --master-disable
      when: not "assessments disabled" == spctl_output.stdout

    - name: Ensure watch CLI tool is installed
      package:
        name: watch
        state: present
      tags: cli

    - name: Ensure locate service is autostarted and running
      become: true
      shell: launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
      tags: service

    - name: Ensure latest version of CleanMyMac is installed
      include_role:
        name: macos-app
      vars:
        application_version: 4.4.1
        application_dmg_path: '{{ google_drive_path }}/resources/CleanMyMac_X_4.4.1__TNT_.dmg.enc'
        application_app_name: 'CleanMyMac X.app'
        application_name: 'CleanMyMac X'
        application_password: '{{ encryption_password }}'
      tags: clean_my_mac

    - name: Ensure latest version of Dash is installed
      include_role:
        name: macos-app
      vars:
        application_version: 5.1.5
        application_dmg_path: '{{ google_drive_path }}/resources/Dash_5.1.5__TNT_.dmg.enc'
        application_app_name: Dash.app
        application_name: Dash
        application_password: '{{ encryption_password }}'
      tags: dash

    - name: Ensure mas (MacOS Appstore CLI) and my favorite apps is installed
      include_role:
        name: geerlingguy.mas
      vars:
        mas_email: '{{ apple_id_username }}'
        mas_password: '{{ apple_id_password }}'
        mas_installed_apps:
          - { id: 585829637, name: 'Todoist' }
          - { id: 937984704, name: 'Amphetamine' }
          - { id: 822514576, name: 'SonicWall Mobile Connect' }
        mas_upgrade_all_apps: true
      tags: mas

    - name: Ensure node is installed
      package:
        name: node
      tags: node

    - name: Ensure alfred is installed
      homebrew_cask:
        name: alfred

    - name: Ensure alfred-jetbrains-workflow is installed
      npm:
        name: '@bchatard/alfred-jetbrains'
        global: yes

    - name: Ensure Plex is installed
      homebrew_cask:
        name: plex
      tags: plex

    - name: Ensure VSCode is installed
      homebrew_cask:
        name: visual-studio-code
      tags: vscode

    # Required for https://github.com/carlba/syncify
    - name: Ensure pigz is installed
      package:
        name: pigz
      tags: syncify

    - name: Ensure Slack is installed
      homebrew_cask:
        name: slack
      tags: slack

    - name: Ensure Macpass is installed
      homebrew_cask:
        name: macpass
      tags: slack

    - name: Ensure Tunnelblick is installed
      homebrew_cask:
        name: tunnelblick
      tags: vpn

    - name: Ensure Docker is installed
      homebrew_cask:
        name: docker
      tags: docker

    - name: Ensure Angular CLI is intalled
      npm:
        name: '@angular/cli'
        global: yes
      tags: angular

    - name: Ensure Postman is installed
      homebrew_cask:
        name: postman
      tags: postman

    - name: Ensure transmission-remote-gui is installed
      homebrew_cask:
        name: transmission-remote-gui
      tags: transmission-remote-gui

    - name: Ensure it cookiecutter is installed
      package: name=cookiecutter

    - name: Ensure Resolutionator  is installed and of latest version
      homebrew_cask:
        name: resolutionator
        state: upgraded

    - name: Ensure Typora markdown editor is installed
      homebrew_cask:
        name: typora
      tags: typora

    - name: Ensure typora is availible as a CLI command
      import_role:
        name: carlba.bash_aliases
      vars:
        bash_aliases:
          - { alias: 'typora', command: 'open -a typora' }
      tags: typora

    - name: Ensure applescript file is availible
      blockinfile:
        dest: /tmp/wiki.applescript
        create: true
        block: |
          do shell script "open -a typora {{ google_drive_path }}"
      tags: typora

    - name: Ensure wiki is availible in typora as a Mac Application
      shell: osacompile -o /Applications/Wiki.app /tmp/wiki.applescript
      register: result
      args:
        creates: /Applications/Wiki.app
      tags: typora

    - name: Ensure temporary applescript file is removed
      file:
        path: /tmp/wiki.applescript
        state: absent
      tags: typora

    - name: Ensure Wiki MacOS application icon is replaced
      copy:
        src: resources/applet.icns
        dest: /Applications/Wiki.app/Contents/Resources/applet.icns
      when: result.changed
      tags: typora

    - name: Ensure sshuttle command is availible
      import_role:
        name: carlba.bash_aliases
      vars:
        bash_aliases:
          - { alias: 'sshuttle@servern', command: 'sshuttle -r cada@servern.dahler.se:2222 192.168.1.2/32' }
      tags: bash

    - name: Stop docker command is availible
      import_role:
        name: carlba.bash_aliases
      vars:
        bash_aliases:
          - alias: 'docker-stop'
            command: >-
              launchctl stop $(launchctl list | grep com.docker.docker | cut -f 3) 2> /dev/null
              && echo 'Stopped docker' || echo 'Docker is not running'
      tags: bash

    - name: Ensure flushdns command is availible
      import_role:
        name: carlba.bash_aliases
      vars:
        bash_aliases:
          - alias: 'flushdns'
            command: >-
              sudo killall -HUP mDNSResponder; sudo killall mDNSResponderHelper || sudo dscacheutil -flushcache
      tags: bash

    - name: Ensure finder-restart command is availible
      import_role:
        name: carlba.bash_aliases
      vars:
        bash_aliases:
          - alias: 'finder-restart'
            command: >-
              sudo killall Finder && open /System/Library/CoreServices/Finder.app
      tags: bash

    - name: Ensure guid command is availible
      import_role:
        name: carlba.bash_aliases
      vars:
        bash_aliases:
          - alias: 'guid'
            command: >-
              python -c 'import sys,uuid; sys.stdout.write(str(uuid.uuid4()))' | pbcopy && pbpaste && echo
      tags: bash      

    - name: Ensure script that refreshes spotlight is present
      become: true
      template:
        src: templates/spotlight-refresh.sh
        dest: /usr/local/bin/spotlight-refresh
        force: true
        owner: "{{ ansible_env.USER }}"
        group: staff
        mode: u+x,g+x,o+x
        