---
- hosts: local
  roles:
    - { role: syncthing, tags: syncthing }
  tasks:
    - name: Look for possible Google Drive paths
      stat:
        path: '{{ item }}'
      loop:
        - '{{ ansible_env.HOME }}/gdrive'
        - '{{ ansible_env.HOME }}/Google Drive'
      register: result
      tags: always

    - set_fact:
        google_drive_path: '{{ (result.results | selectattr("stat.exists", "equalto", true) | list | first).item }}'
      tags: always

    - name: installation
      block:
        - name: Ensure brew cask applications are installed and of latest version
          homebrew_cask:
            name: '{{item}}'
            state: upgraded
            path: /opt/homebrew/bin
          loop:
            - iterm2
            - Karabiner-Elements
            - alfred
            - slack
            - macpass
            - transmission-remote-gui
            - typora
            - resolutionator
            - cursorcerer
            # https://formulae.brew.sh/cask/lyricsx
            # https://github.com/ddddxxx/LyricsX
            - lyricsx
            # https://formulae.brew.sh/cask/pocket-casts
            - pocket-casts
          tags: installation

        - name: Ensure brew applications are installed and of latest version
          homebrew:
            name: '{{item}}'
            state: upgraded
            path: /opt/homebrew/bin
          loop:
            # Required for https://github.com/carlba/syncify
            - pigz
          tags: installation

        - name: Ensure mas (macOS App Store CLI) and my favorite apps is installed
          include_role:
            name: geerlingguy.mas
          vars:
            mas_email: '{{ apple_id_username }}'
            mas_password: '{{ apple_id_password }}'
            mas_installed_apps:
              - { id: 585829637, name: 'Todoist' }
            mas_upgrade_all_apps: true
          tags: [mas, installation]

        - name: Ensure Angular CLI is installed
          npm:
            name: '@angular/cli'
            global: yes
          tags: angular

        - name: Ensure latest version of Dash is installed
          include_role:
            name: macos-app
          vars:
            application_version: 5.1.5
            application_dmg_path: '{{ google_drive_path }}/resources/Dash_5.1.5__TNT_.dmg.enc'
            application_app_name: Dash.app
            application_name: Dash
            application_password: '{{ encryption_password }}'
          tags: dash

        - name: install typora extras
          block:
            - name: Ensure Typora is available as a CLI command
              import_role:
                name: carlba.bash_aliases
              vars:
                bash_aliases:
                  - { alias: 'typora', command: 'open -a typora' }
              tags: typora

            - name: Ensure applescript file is available
              blockinfile:
                dest: /tmp/wiki.applescript
                create: true
                block: |
                  do shell script "open -a typora {{ google_drive_path }}/wiki"
              tags: wiki

            - name: Ensure wiki is available in typora as a Mac Application
              shell: osacompile -o /Applications/Wiki.app /tmp/wiki.applescript
              register: ensure_wiki_result
              args:
                creates: /Applications/Wiki.app
              tags: wiki

            - name: Ensure temporary AppleScript file is removed
              file:
                path: /tmp/wiki.applescript
                state: absent
              tags: wiki

            - name: Ensure Wiki MacOS application icon is replaced
              copy:
                src: resources/applet.icns
                dest: /Applications/Wiki.app/Contents/Resources/applet.icns
              when: ensure_wiki_result.changed
              tags: wiki

    - name: MacOS tweaks
      block:
        - name: Speed up dock autohide
          osx_defaults:
            domain: com.apple.dock
            key: autohide-time-modifier
            type: int
            value: 0
            state: present

        - name: Speed up dock autohide
          osx_defaults:
            domain: com.apple.dock
            key: autohide-delay
            type: float
            value: 0.0
            state: present

        - name: Prompt on quit
          osx_defaults:
            domain: com.googlecode.iterm2
            key: PromptOnQuit
            type: string
            value: 0
            state: present

        - name: Ensure MacOS doesn't read .DS_Store from network storage
          osx_defaults:
            domain: com.apple.desktopservices
            key: DSDontWriteNetworkStores
            type: bool
            value: true
            state: present

        - name: Ensure MacOS uses Scale effect when minimizing windows
          osx_defaults:
            domain: com.apple.dock
            key: mineffect
            type: string
            value: scale
            state: present

        # http://osxdaily.com/2010/03/02/minimize-windows-into-the-applications-dock-icon/
        - name: Ensure MacOS minimizes applications to dock icon
          osx_defaults:
            domain: com.apple.dock
            key: minimize-to-application
            type: bool
            value: true
            state: present

        - name: Create KeyBindings Directory
          file:
            path: '{{ ansible_env.HOME }}/Library/KeyBindings'
            state: directory

        - name: Remap home and end to linux behavior
          blockinfile:
            marker: '/* {mark} ANSIBLE MANAGED BLOCK (Remap home and end to linux behavior) */'
            dest: '{{ ansible_env.HOME }}/Library/KeyBindings/DefaultKeyBinding.dict'
            create: true
            block: |
              {
                  "\UF729" = "moveToBeginningOfLine:"; /* Home */
                  "\UF72B" = "moveToEndOfLine:"; /* End */
                  "$\UF729" = "moveToBeginningOfLineAndModifySelection:"; /* Shift + Home */
                  "$\UF72B" = "moveToEndOfLineAndModifySelection:"; /* Shift + End */
                  "^\UF729" = "moveToBeginningOfDocument:"; /* Ctrl + Home */
                  "^\UF72B" = "moveToEndOfDocument:"; /* Ctrl + End */
                  "$^\UF729" = "moveToBeginningOfDocumentAndModifySelection:"; /* Shift + Ctrl + Home */
                  "$^\UF72B" = "moveToEndOfDocumentAndModifySelection:"; /* Shift + Ctrl + End */
              }

    - name: karabiner elements config
      block:
        - name: Ensure Karabiner config directory exists
          file:
            path: '{{ ansible_env.HOME }}/.config/karabiner'
            state: directory
          tags: karabiner

        - name: Add Karabiner-Elements config to map caps lock to F19
          template:
            src: karabiner.json
            dest: '{{ ansible_env.HOME }}/.config/karabiner/karabiner.json'
          tags: karabiner

        # TODO: Only add the login item if it doesn't exist
        - name: Ensure Karabiner-Elements is launched on startup
          shell: >
            osascript -e 'tell application "System Events" to make login item at end with properties
            {path:"/Applications/Karabiner-Elements.app", hidden:true}'
          when: false

    - name: Ensure locate service is auto started and running
      become: true
      shell: launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
      tags: service

    - name: Ensure SmartGit is available as a CLI command
      copy:
        src: resources/applet.icns
        dest: /Applications/Wiki.app/Contents/Resources/applet.icns
      when: result.changed
      tags: smartgit

    - name: ensure cli commands are present
      block:
        - name: Stop docker command is available
          import_role:
            name: carlba.bash_aliases
          vars:
            bash_aliases:
              - alias: 'docker-stop'
                command: >-
                  launchctl stop $(launchctl list | grep application.com.docker | cut -f 3) 2> /dev/null
                  && echo 'Stopped docker' || echo 'Docker is not running'
          tags: bash

        - name: Ensure meet cli command is present
          import_role:
            name: carlba.bash_aliases
          vars:
            bash_aliases:
              - alias: 'meet'
                command: >-
                  open 'https://meet.google.com/new?authuser=carl@pocketlaw.com'
          tags: bash

        - name: Ensure flushdns command is available
          import_role:
            name: carlba.bash_aliases
          vars:
            bash_aliases:
              - alias: 'flushdns'
                command: >-
                  sudo killall -HUP mDNSResponder; sudo killall mDNSResponderHelper || sudo dscacheutil -flushcache
          tags: bash

        - name: Ensure finder-restart command is available
          import_role:
            name: carlba.bash_aliases
          vars:
            bash_aliases:
              - alias: 'finder-restart'
                command: >-
                  sudo killall Finder && open /System/Library/CoreServices/Finder.app
          tags: bash

        - name: Ensure smartgit command is available
          import_role:
            name: carlba.bash_aliases
          vars:
            bash_aliases:
              - alias: 'smartgit'
                command: >-
                  open -a 'SmartGit' -n --args
          tags: bash

        - name: Ensure guid command is available
          import_role:
            name: carlba.bash_aliases
          vars:
            bash_aliases:
              - alias: 'guid'
                command: >-
                  python -c 'import sys,uuid; sys.stdout.write(str(uuid.uuid4()))' | pbcopy && pbpaste && echo
          tags: bash

    - name: Ensure Python is in path
      blockinfile:
        dest: '{{ ansible_env.HOME }}/.bash_profile'
        block: export PATH="/usr/local/opt/python/libexec/bin:$PATH"
        marker: '# {mark} ANSIBLE MANAGED BLOCK (Ensure Python is in path)'
        insertbefore: BOF
        create: true
      tags: python

    - name: Ensure Google Chrome Work CLI Launcher is present
      template:
        src: google-chrome.j2
        dest: '/usr/local/bin/chrome-{{google_chrome_profile}}'
        mode: +x
      vars:
        - google_chrome_profile: work

      tags: google-chrome

    - name: Ensure Google Chrome Work CLI Launcher is present
      template:
        src: google-chrome.j2
        dest: '/usr/local/bin/chrome-{{google_chrome_profile}}'
        mode: +x
      vars:
        - google_chrome_profile: personal
      tags: google-chrome
