---

- name: Register application path
  stat: 
    path: "/Applications/{{ application_app_name }}"
  register: application_app_path
  tags: application

- name: Register installed version output
  shell: '/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "/Applications/{{ application_app_name }}/Contents/Info.plist"'
  register: plist_buddy_output
  when: application_app_path.stat.exists
  tags: application

- name: Set installed version variable
  set_fact:
    installed_version: '{{ plist_buddy_output.stdout }}'
  when: application_app_path.stat.exists
  tags: application

- name: Ensure Application is installed
  block:
    - name: Ensure temp Application folder exist
      file:
        path: '/tmp/{{ application_name }}'
        state: directory

    - name: Detect encryption
      set_fact:
        encrypted: '{{ true if (application_dmg_path | splitext)[1] == ".enc" else false }}'

    - name: Decrypt file
      shell: "openssl enc -d -aes-256-cbc -in '{{ application_dmg_path }}' -out '{{ (application_dmg_path | splitext)[0] }}' -pass stdin"
      args:
        stdin: '{{ application_password }}'
      when: encrypted

    # This internal variable for the role is necessary because ansible set_fact does not allow
    # overwriting task level variables.
    - set_fact:
        _application_dmg_path: '{{ (application_dmg_path | splitext)[0] if encrypted else application_dmg_path }}'

    - set_fact:
        application_dmg_directory: '{{ _application_dmg_path | dirname }}'
        application_dmg_file: '{{ _application_dmg_path | basename }}'

    - name: Ensure Application dmg-file exists in Application temp folder
      copy:
        src: '{{ _application_dmg_path }}'
        dest: '/tmp/{{ application_name }}'

    - name: Ensure Application dmg-file is mounted
      shell: 'hdiutil attach "/tmp/{{ application_name }}/{{ application_dmg_file }}" -nobrowse'

    - name: Find the dmg-file nested in the Application dmg-file
      find:
        paths: '/Volumes'
        patterns: '{{ application_name }}*{{ application_version }}*.dmg'
        depth: 3
        recurse: true
      register: find_nested_dmg_result

    - name: Ensure the installation dmg-file within the Application dmg-file is mounted
      shell:
        "hdiutil attach '{{ find_nested_dmg_result.files[0].path }}' -nobrowse"

    - name: Ensure the old Application .app folder is removed
      become: true
      file:
        path: '/Applications/{{ application_app_name }}'
        force: true
        state: absent
    
    # TODO: A bug in the rsync module requires spaces to be escaped in rsync path remove when no longer needed
    - name: Ensure the Application .app folder is copied to Applications
      synchronize:
        src: '/Volumes/{{ application_name }}\\ {{ application_version }}\\ 1/{{ application_app_name }}'
        dest: /Applications/

    - name: Ensure the dmg nested in the downloaded dmg is unmounted
      shell: 'hdiutil detach "/Volumes/{{ application_name }} {{ application_version }} 1"'

    - name: Ensure the downloaded dmg is unmounted
      shell: 'hdiutil detach "/Volumes/{{ application_name }} {{ application_version }}"'

    - name: Ensure temp Application folder does not exist
      file:
        path: '/tmp/{{ application_name }}'
        state: absent

    - name: Ensure the temporary unencrypted file does not exist
      file:
        path: '{{ _application_dmg_path }}'
        state: absent
  when: not application_app_path.stat.exists or installed_version is version(application_version, '<')
  tags: application
